

Microchip MPLAB XC8 Assembler V2.10 build 88905656 
                                                                                               Fri Apr 10 16:01:03 2020

Microchip MPLAB XC8 C Compiler v2.10 (Free license) build 20190730164152 Og1 
     1                           	processor	16F887
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	maintext,global,class=CODE,split=1,delta=2
     9                           	psect	text1,local,class=CODE,merge=1,delta=2
    10                           	psect	text2,local,class=CODE,merge=1,delta=2
    11                           	psect	text3,local,class=CODE,merge=1,delta=2
    12                           	psect	text4,local,class=CODE,merge=1,delta=2
    13                           	psect	text5,local,class=CODE,merge=1,delta=2
    14                           	psect	text6,local,class=CODE,merge=1,delta=2
    15                           	psect	text7,local,class=CODE,merge=1,delta=2
    16                           	dabs	1,0x7E,2
    17  0000                     
    18                           ; Version 2.10
    19                           ; Generated 31/07/2019 GMT
    20                           ; 
    21                           ; Copyright Â© 2019, Microchip Technology Inc. and its subsidiaries ("Microchip")
    22                           ; All rights reserved.
    23                           ; 
    24                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    25                           ; 
    26                           ; Redistribution and use in source and binary forms, with or without modification, are
    27                           ; permitted provided that the following conditions are met:
    28                           ; 
    29                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    30                           ;        conditions and the following disclaimer.
    31                           ; 
    32                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    33                           ;        of conditions and the following disclaimer in the documentation and/or other
    34                           ;        materials provided with the distribution.
    35                           ; 
    36                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    37                           ;        software without specific prior written permission.
    38                           ; 
    39                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    40                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    41                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    42                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    43                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    44                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    45                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    46                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    47                           ; 
    48                           ; 
    49                           ; Code-generator required, PIC16F887 Definitions
    50                           ; 
    51                           ; SFR Addresses
    52  0000                     	;# 
    53  0001                     	;# 
    54  0002                     	;# 
    55  0003                     	;# 
    56  0004                     	;# 
    57  0005                     	;# 
    58  0006                     	;# 
    59  0007                     	;# 
    60  0008                     	;# 
    61  0009                     	;# 
    62  000A                     	;# 
    63  000B                     	;# 
    64  000C                     	;# 
    65  000D                     	;# 
    66  000E                     	;# 
    67  000E                     	;# 
    68  000F                     	;# 
    69  0010                     	;# 
    70  0011                     	;# 
    71  0012                     	;# 
    72  0013                     	;# 
    73  0014                     	;# 
    74  0015                     	;# 
    75  0015                     	;# 
    76  0016                     	;# 
    77  0017                     	;# 
    78  0018                     	;# 
    79  0019                     	;# 
    80  001A                     	;# 
    81  001B                     	;# 
    82  001B                     	;# 
    83  001C                     	;# 
    84  001D                     	;# 
    85  001E                     	;# 
    86  001F                     	;# 
    87  0081                     	;# 
    88  0085                     	;# 
    89  0086                     	;# 
    90  0087                     	;# 
    91  0088                     	;# 
    92  0089                     	;# 
    93  008C                     	;# 
    94  008D                     	;# 
    95  008E                     	;# 
    96  008F                     	;# 
    97  0090                     	;# 
    98  0091                     	;# 
    99  0092                     	;# 
   100  0093                     	;# 
   101  0093                     	;# 
   102  0093                     	;# 
   103  0094                     	;# 
   104  0095                     	;# 
   105  0096                     	;# 
   106  0097                     	;# 
   107  0098                     	;# 
   108  0099                     	;# 
   109  009A                     	;# 
   110  009B                     	;# 
   111  009C                     	;# 
   112  009D                     	;# 
   113  009E                     	;# 
   114  009F                     	;# 
   115  0105                     	;# 
   116  0107                     	;# 
   117  0108                     	;# 
   118  0109                     	;# 
   119  010C                     	;# 
   120  010C                     	;# 
   121  010D                     	;# 
   122  010E                     	;# 
   123  010F                     	;# 
   124  0185                     	;# 
   125  0187                     	;# 
   126  0188                     	;# 
   127  0189                     	;# 
   128  018C                     	;# 
   129  018D                     	;# 
   130  0000                     	;# 
   131  0001                     	;# 
   132  0002                     	;# 
   133  0003                     	;# 
   134  0004                     	;# 
   135  0005                     	;# 
   136  0006                     	;# 
   137  0007                     	;# 
   138  0008                     	;# 
   139  0009                     	;# 
   140  000A                     	;# 
   141  000B                     	;# 
   142  000C                     	;# 
   143  000D                     	;# 
   144  000E                     	;# 
   145  000E                     	;# 
   146  000F                     	;# 
   147  0010                     	;# 
   148  0011                     	;# 
   149  0012                     	;# 
   150  0013                     	;# 
   151  0014                     	;# 
   152  0015                     	;# 
   153  0015                     	;# 
   154  0016                     	;# 
   155  0017                     	;# 
   156  0018                     	;# 
   157  0019                     	;# 
   158  001A                     	;# 
   159  001B                     	;# 
   160  001B                     	;# 
   161  001C                     	;# 
   162  001D                     	;# 
   163  001E                     	;# 
   164  001F                     	;# 
   165  0081                     	;# 
   166  0085                     	;# 
   167  0086                     	;# 
   168  0087                     	;# 
   169  0088                     	;# 
   170  0089                     	;# 
   171  008C                     	;# 
   172  008D                     	;# 
   173  008E                     	;# 
   174  008F                     	;# 
   175  0090                     	;# 
   176  0091                     	;# 
   177  0092                     	;# 
   178  0093                     	;# 
   179  0093                     	;# 
   180  0093                     	;# 
   181  0094                     	;# 
   182  0095                     	;# 
   183  0096                     	;# 
   184  0097                     	;# 
   185  0098                     	;# 
   186  0099                     	;# 
   187  009A                     	;# 
   188  009B                     	;# 
   189  009C                     	;# 
   190  009D                     	;# 
   191  009E                     	;# 
   192  009F                     	;# 
   193  0105                     	;# 
   194  0107                     	;# 
   195  0108                     	;# 
   196  0109                     	;# 
   197  010C                     	;# 
   198  010C                     	;# 
   199  010D                     	;# 
   200  010E                     	;# 
   201  010F                     	;# 
   202  0185                     	;# 
   203  0187                     	;# 
   204  0188                     	;# 
   205  0189                     	;# 
   206  018C                     	;# 
   207  018D                     	;# 
   208  0019                     _TXREG	set	25
   209  001A                     _RCREG	set	26
   210  000C                     _PIR1bits	set	12
   211  0018                     _RCSTAbits	set	24
   212  009A                     _SPBRGH	set	154
   213  0099                     _SPBRG	set	153
   214  0098                     _TXSTAbits	set	152
   215  008F                     _OSCCONbits	set	143
   216  0187                     _BAUDCTLbits	set	391
   217                           
   218                           	psect	strings
   219  0003                     __pstrings:	
   220  0003                     stringtab:	
   221  0003                     __stringtab:	
   222  0003                     stringcode:	
   223                           ;	String table - string pointers are 1 byte each
   224                           
   225  0003                     stringdir:	
   226  0003  3000               	movlw	high stringdir
   227  0004  008A               	movwf	10
   228  0005  0804               	movf	4,w
   229  0006  0A84               	incf	4,f
   230  0007  0782               	addwf	2,f
   231  0008                     __stringbase:	
   232  0008  3400               	retlw	0
   233  0009                     __end_of__stringtab:	
   234  0009                     STR_1:	
   235  0009  344E               	retlw	78	;'N'
   236  000A  3461               	retlw	97	;'a'
   237  000B  3464               	retlw	100	;'d'
   238  000C  3461               	retlw	97	;'a'
   239  000D  3400               	retlw	0
   240                           
   241                           ; #config settings
   242  0000                     
   243                           	psect	cinit
   244  07F6                     start_initialization:	
   245  07F6                     __initialization:	
   246                           
   247                           ; Clear objects allocated to COMMON
   248  07F6  01F0               	clrf	__pbssCOMMON& (0+127)
   249  07F7  01F1               	clrf	(__pbssCOMMON+1)& (0+127)
   250  07F8  01F2               	clrf	(__pbssCOMMON+2)& (0+127)
   251  07F9  01F3               	clrf	(__pbssCOMMON+3)& (0+127)
   252  07FA  01F4               	clrf	(__pbssCOMMON+4)& (0+127)
   253  07FB  01F5               	clrf	(__pbssCOMMON+5)& (0+127)
   254  07FC                     end_of_initialization:	
   255                           ;End of C runtime variable initialization code
   256                           
   257  07FC                     __end_of__initialization:	
   258  07FC  0183               	clrf	3
   259  07FD  120A  118A  2E0B   	ljmp	_main	;jump to C main() function
   260                           
   261                           	psect	bssCOMMON
   262  0070                     __pbssCOMMON:	
   263  0070                     _tempe:	
   264  0070                     	ds	1
   265  0071                     _humo:	
   266  0071                     	ds	1
   267  0072                     _dist:	
   268  0072                     	ds	1
   269  0073                     _luz:	
   270  0073                     	ds	1
   271  0074                     _celda:	
   272  0074                     	ds	1
   273  0075                     _x:	
   274  0075                     	ds	1
   275                           
   276                           	psect	cstackCOMMON
   277  0076                     __pcstackCOMMON:	
   278  0076                     ?_iniciarOSC:	
   279  0076                     ??_iniciarOSC:	
   280                           ; 1 bytes @ 0x0
   281                           
   282  0076                     ?_iniciarUART:	
   283                           ; 1 bytes @ 0x0
   284                           
   285  0076                     ??_iniciarUART:	
   286                           ; 1 bytes @ 0x0
   287                           
   288  0076                     ?_UARTrecibir:	
   289                           ; 1 bytes @ 0x0
   290                           
   291  0076                     ??_UARTrecibir:	
   292                           ; 1 bytes @ 0x0
   293                           
   294  0076                     ?_UARTenviar:	
   295                           ; 1 bytes @ 0x0
   296                           
   297  0076                     ??_UARTenviar:	
   298                           ; 1 bytes @ 0x0
   299                           
   300  0076                     ?_UARTprint:	
   301                           ; 1 bytes @ 0x0
   302                           
   303  0076                     ?_UARTenvINT:	
   304                           ; 1 bytes @ 0x0
   305                           
   306  0076                     ?_ReadWrite:	
   307                           ; 1 bytes @ 0x0
   308                           
   309  0076                     ?_main:	
   310                           ; 1 bytes @ 0x0
   311                           
   312  0076                     UARTenviar@data:	
   313                           ; 1 bytes @ 0x0
   314                           
   315  0076                     UARTenvINT@x:	
   316                           ; 1 bytes @ 0x0
   317                           
   318                           
   319                           ; 2 bytes @ 0x0
   320  0076                     	ds	1
   321  0077                     ??_UARTprint:	
   322                           
   323                           ; 1 bytes @ 0x1
   324  0077                     	ds	1
   325  0078                     ??_UARTenvINT:	
   326  0078                     iniciarOSC@frec:	
   327                           ; 1 bytes @ 0x2
   328                           
   329  0078                     UARTprint@data:	
   330                           ; 1 bytes @ 0x2
   331                           
   332                           
   333                           ; 1 bytes @ 0x2
   334  0078                     	ds	1
   335  0079                     UARTprint@i:	
   336                           
   337                           ; 1 bytes @ 0x3
   338  0079                     	ds	1
   339  007A                     ??_ReadWrite:	
   340                           
   341                           ; 1 bytes @ 0x4
   342  007A                     	ds	2
   343  007C                     ??_main:	
   344                           
   345                           	psect	maintext
   346  060B                     __pmaintext:	
   347                           ; 1 bytes @ 0x6
   348 ;;
   349 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   350 ;;
   351 ;; *************** function _main *****************
   352 ;; Defined at:
   353 ;;		line 99 in file "Datos.c"
   354 ;; Parameters:    Size  Location     Type
   355 ;;		None
   356 ;; Auto vars:     Size  Location     Type
   357 ;;		None
   358 ;; Return value:  Size  Location     Type
   359 ;;                  1    wreg      void 
   360 ;; Registers used:
   361 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   362 ;; Tracked objects:
   363 ;;		On entry : B00/0
   364 ;;		On exit  : 0/0
   365 ;;		Unchanged: 0/0
   366 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   367 ;;      Params:         0       0       0       0       0
   368 ;;      Locals:         0       0       0       0       0
   369 ;;      Temps:          0       0       0       0       0
   370 ;;      Totals:         0       0       0       0       0
   371 ;;Total ram usage:        0 bytes
   372 ;; Hardware stack levels required when called:    3
   373 ;; This function calls:
   374 ;;		_ReadWrite
   375 ;;		_iniciarOSC
   376 ;;		_iniciarUART
   377 ;; This function is called by:
   378 ;;		Startup code after reset
   379 ;; This function uses a non-reentrant model
   380 ;;
   381                           
   382                           
   383                           ;psect for function _main
   384  060B                     _main:	
   385  060B                     l953:	
   386                           ;incstack = 0
   387                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   388                           
   389                           
   390                           ;Datos.c: 101:     iniciarOSC(6);
   391  060B  3006               	movlw	6
   392  060C  120A  118A  265A  120A  118A  	fcall	_iniciarOSC
   393  0611                     l955:	
   394                           
   395                           ;Datos.c: 103:     iniciarUART();
   396  0611  120A  118A  261F  120A  118A  	fcall	_iniciarUART
   397  0616                     l957:	
   398                           
   399                           ;Datos.c: 106:     {;Datos.c: 107:         ReadWrite();
   400  0616  120A  118A  26BB  120A  118A  	fcall	_ReadWrite
   401  061B  2E16               	goto	l957
   402  061C  120A  118A  2800   	ljmp	start
   403  061F                     __end_of_main:	
   404                           
   405                           	psect	text1
   406  061F                     __ptext1:	
   407 ;; *************** function _iniciarUART *****************
   408 ;; Defined at:
   409 ;;		line 13 in file "./UART.h"
   410 ;; Parameters:    Size  Location     Type
   411 ;;		None
   412 ;; Auto vars:     Size  Location     Type
   413 ;;		None
   414 ;; Return value:  Size  Location     Type
   415 ;;                  1    wreg      void 
   416 ;; Registers used:
   417 ;;		wreg, status,2
   418 ;; Tracked objects:
   419 ;;		On entry : 0/0
   420 ;;		On exit  : 0/0
   421 ;;		Unchanged: 0/0
   422 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   423 ;;      Params:         0       0       0       0       0
   424 ;;      Locals:         0       0       0       0       0
   425 ;;      Temps:          0       0       0       0       0
   426 ;;      Totals:         0       0       0       0       0
   427 ;;Total ram usage:        0 bytes
   428 ;; Hardware stack levels used:    1
   429 ;; This function calls:
   430 ;;		Nothing
   431 ;; This function is called by:
   432 ;;		_main
   433 ;; This function uses a non-reentrant model
   434 ;;
   435                           
   436                           
   437                           ;psect for function _iniciarUART
   438  061F                     _iniciarUART:	
   439  061F                     l737:	
   440                           ;incstack = 0
   441                           ; Regs used in _iniciarUART: [wreg+status,2]
   442                           
   443                           
   444                           ;./UART.h: 15:     TXSTAbits.TXEN = 1;
   445  061F  1683               	bsf	3,5	;RP0=1, select bank1
   446  0620  1303               	bcf	3,6	;RP1=0, select bank1
   447  0621  1698               	bsf	24,5	;volatile
   448                           
   449                           ;./UART.h: 16:     TXSTAbits.SYNC = 0;
   450  0622  1218               	bcf	24,4	;volatile
   451                           
   452                           ;./UART.h: 17:     RCSTAbits.SPEN = 1;
   453  0623  1283               	bcf	3,5	;RP0=0, select bank0
   454  0624  1303               	bcf	3,6	;RP1=0, select bank0
   455  0625  1798               	bsf	24,7	;volatile
   456                           
   457                           ;./UART.h: 18:     TXSTAbits.TX9 = 0;
   458  0626  1683               	bsf	3,5	;RP0=1, select bank1
   459  0627  1303               	bcf	3,6	;RP1=0, select bank1
   460  0628  1318               	bcf	24,6	;volatile
   461                           
   462                           ;./UART.h: 19:     RCSTAbits.CREN = 1;
   463  0629  1283               	bcf	3,5	;RP0=0, select bank0
   464  062A  1303               	bcf	3,6	;RP1=0, select bank0
   465  062B  1618               	bsf	24,4	;volatile
   466  062C                     l739:	
   467                           
   468                           ;./UART.h: 21:     SPBRG = 25;
   469  062C  3019               	movlw	25
   470  062D  1683               	bsf	3,5	;RP0=1, select bank1
   471  062E  1303               	bcf	3,6	;RP1=0, select bank1
   472  062F  0099               	movwf	25	;volatile
   473  0630                     l741:	
   474                           
   475                           ;./UART.h: 22:     SPBRGH = 0;
   476  0630  019A               	clrf	26	;volatile
   477  0631                     l743:	
   478                           
   479                           ;./UART.h: 23:     BAUDCTLbits.BRG16 = 0;
   480  0631  1683               	bsf	3,5	;RP0=1, select bank3
   481  0632  1703               	bsf	3,6	;RP1=1, select bank3
   482  0633  1187               	bcf	7,3	;volatile
   483  0634                     l745:	
   484                           
   485                           ;./UART.h: 24:     TXSTAbits.BRGH = 1;
   486  0634  1683               	bsf	3,5	;RP0=1, select bank1
   487  0635  1303               	bcf	3,6	;RP1=0, select bank1
   488  0636  1518               	bsf	24,2	;volatile
   489  0637                     l37:	
   490  0637  0008               	return
   491  0638                     __end_of_iniciarUART:	
   492                           
   493                           	psect	text2
   494  065A                     __ptext2:	
   495 ;; *************** function _iniciarOSC *****************
   496 ;; Defined at:
   497 ;;		line 5 in file "./Oscilador.h"
   498 ;; Parameters:    Size  Location     Type
   499 ;;  frec            1    wreg     unsigned char 
   500 ;; Auto vars:     Size  Location     Type
   501 ;;  frec            1    2[COMMON] unsigned char 
   502 ;; Return value:  Size  Location     Type
   503 ;;                  1    wreg      void 
   504 ;; Registers used:
   505 ;;		wreg, fsr0l, fsr0h, status,2, status,0
   506 ;; Tracked objects:
   507 ;;		On entry : 0/0
   508 ;;		On exit  : 0/0
   509 ;;		Unchanged: 0/0
   510 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   511 ;;      Params:         0       0       0       0       0
   512 ;;      Locals:         1       0       0       0       0
   513 ;;      Temps:          2       0       0       0       0
   514 ;;      Totals:         3       0       0       0       0
   515 ;;Total ram usage:        3 bytes
   516 ;; Hardware stack levels used:    1
   517 ;; This function calls:
   518 ;;		Nothing
   519 ;; This function is called by:
   520 ;;		_main
   521 ;; This function uses a non-reentrant model
   522 ;;
   523                           
   524                           
   525                           ;psect for function _iniciarOSC
   526  065A                     _iniciarOSC:	
   527                           
   528                           ;incstack = 0
   529                           ; Regs used in _iniciarOSC: [wreg-fsr0h+status,2+status,0]
   530                           ;iniciarOSC@frec stored from wreg
   531  065A  00F8               	movwf	iniciarOSC@frec
   532  065B                     l709:	
   533                           
   534                           ;./Oscilador.h: 5: void iniciarOSC(uint8_t frec);./Oscilador.h: 6: {;./Oscilador.h: 7:  
      +                             switch(frec)
   535  065B  2E97               	goto	l731
   536  065C                     l711:	
   537                           
   538                           ;./Oscilador.h: 10:             OSCCONbits.IRCF = 0b000;
   539  065C  308F               	movlw	-113
   540  065D  1683               	bsf	3,5	;RP0=1, select bank1
   541  065E  1303               	bcf	3,6	;RP1=0, select bank1
   542  065F  058F               	andwf	15,f	;volatile
   543                           
   544                           ;./Oscilador.h: 11:             break;
   545  0660  2EB9               	goto	l25
   546  0661                     l713:	
   547                           
   548                           ;./Oscilador.h: 14:             OSCCONbits.IRCF = 0b001;
   549  0661  1683               	bsf	3,5	;RP0=1, select bank1
   550  0662  1303               	bcf	3,6	;RP1=0, select bank1
   551  0663  080F               	movf	15,w	;volatile
   552  0664  398F               	andlw	-113
   553  0665  3810               	iorlw	16
   554  0666  008F               	movwf	15	;volatile
   555                           
   556                           ;./Oscilador.h: 15:             break;
   557  0667  2EB9               	goto	l25
   558  0668                     l715:	
   559                           
   560                           ;./Oscilador.h: 18:             OSCCONbits.IRCF = 0b010;
   561  0668  1683               	bsf	3,5	;RP0=1, select bank1
   562  0669  1303               	bcf	3,6	;RP1=0, select bank1
   563  066A  080F               	movf	15,w	;volatile
   564  066B  398F               	andlw	-113
   565  066C  3820               	iorlw	32
   566  066D  008F               	movwf	15	;volatile
   567                           
   568                           ;./Oscilador.h: 19:             break;
   569  066E  2EB9               	goto	l25
   570  066F                     l717:	
   571                           
   572                           ;./Oscilador.h: 22:             OSCCONbits.IRCF = 0b001;
   573  066F  1683               	bsf	3,5	;RP0=1, select bank1
   574  0670  1303               	bcf	3,6	;RP1=0, select bank1
   575  0671  080F               	movf	15,w	;volatile
   576  0672  398F               	andlw	-113
   577  0673  3810               	iorlw	16
   578  0674  008F               	movwf	15	;volatile
   579                           
   580                           ;./Oscilador.h: 23:             break;
   581  0675  2EB9               	goto	l25
   582  0676                     l719:	
   583                           
   584                           ;./Oscilador.h: 26:             OSCCONbits.IRCF = 0b100;
   585  0676  1683               	bsf	3,5	;RP0=1, select bank1
   586  0677  1303               	bcf	3,6	;RP1=0, select bank1
   587  0678  080F               	movf	15,w	;volatile
   588  0679  398F               	andlw	-113
   589  067A  3840               	iorlw	64
   590  067B  008F               	movwf	15	;volatile
   591                           
   592                           ;./Oscilador.h: 27:             break;
   593  067C  2EB9               	goto	l25
   594  067D                     l721:	
   595                           
   596                           ;./Oscilador.h: 30:             OSCCONbits.IRCF = 0b101;
   597  067D  1683               	bsf	3,5	;RP0=1, select bank1
   598  067E  1303               	bcf	3,6	;RP1=0, select bank1
   599  067F  080F               	movf	15,w	;volatile
   600  0680  398F               	andlw	-113
   601  0681  3850               	iorlw	80
   602  0682  008F               	movwf	15	;volatile
   603                           
   604                           ;./Oscilador.h: 31:             break;
   605  0683  2EB9               	goto	l25
   606  0684                     l723:	
   607                           
   608                           ;./Oscilador.h: 34:             OSCCONbits.IRCF = 0b110;
   609  0684  1683               	bsf	3,5	;RP0=1, select bank1
   610  0685  1303               	bcf	3,6	;RP1=0, select bank1
   611  0686  080F               	movf	15,w	;volatile
   612  0687  398F               	andlw	-113
   613  0688  3860               	iorlw	96
   614  0689  008F               	movwf	15	;volatile
   615                           
   616                           ;./Oscilador.h: 35:             break;
   617  068A  2EB9               	goto	l25
   618  068B                     l725:	
   619                           
   620                           ;./Oscilador.h: 38:             OSCCONbits.IRCF = 0b111;
   621  068B  3070               	movlw	112
   622  068C  1683               	bsf	3,5	;RP0=1, select bank1
   623  068D  1303               	bcf	3,6	;RP1=0, select bank1
   624  068E  048F               	iorwf	15,f	;volatile
   625                           
   626                           ;./Oscilador.h: 39:             break;
   627  068F  2EB9               	goto	l25
   628  0690                     l727:	
   629                           
   630                           ;./Oscilador.h: 42:             OSCCONbits.IRCF = 0b110;
   631  0690  1683               	bsf	3,5	;RP0=1, select bank1
   632  0691  1303               	bcf	3,6	;RP1=0, select bank1
   633  0692  080F               	movf	15,w	;volatile
   634  0693  398F               	andlw	-113
   635  0694  3860               	iorlw	96
   636  0695  008F               	movwf	15	;volatile
   637                           
   638                           ;./Oscilador.h: 43:             break;
   639  0696  2EB9               	goto	l25
   640  0697                     l731:	
   641  0697  0878               	movf	iniciarOSC@frec,w
   642  0698  00F6               	movwf	??_iniciarOSC
   643  0699  01F7               	clrf	??_iniciarOSC+1
   644                           
   645                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   646                           ; Switch size 1, requested type "simple"
   647                           ; Number of cases is 1, Range of values is 0 to 0
   648                           ; switch strategies available:
   649                           ; Name         Instructions Cycles
   650                           ; simple_byte            4     3 (average)
   651                           ; direct_byte           11     8 (fixed)
   652                           ; jumptable            260     6 (fixed)
   653                           ;	Chosen strategy is simple_byte
   654  069A  0877               	movf	??_iniciarOSC+1,w
   655  069B  3A00               	xorlw	0	; case 0
   656  069C  1903               	skipnz
   657  069D  2E9F               	goto	l999
   658  069E  2E90               	goto	l727
   659  069F                     l999:	
   660                           
   661                           ; Switch size 1, requested type "simple"
   662                           ; Number of cases is 8, Range of values is 0 to 7
   663                           ; switch strategies available:
   664                           ; Name         Instructions Cycles
   665                           ; simple_byte           25    13 (average)
   666                           ; direct_byte           32     8 (fixed)
   667                           ; jumptable            260     6 (fixed)
   668                           ;	Chosen strategy is simple_byte
   669  069F  0876               	movf	??_iniciarOSC,w
   670  06A0  3A00               	xorlw	0	; case 0
   671  06A1  1903               	skipnz
   672  06A2  2E5C               	goto	l711
   673  06A3  3A01               	xorlw	1	; case 1
   674  06A4  1903               	skipnz
   675  06A5  2E61               	goto	l713
   676  06A6  3A03               	xorlw	3	; case 2
   677  06A7  1903               	skipnz
   678  06A8  2E68               	goto	l715
   679  06A9  3A01               	xorlw	1	; case 3
   680  06AA  1903               	skipnz
   681  06AB  2E6F               	goto	l717
   682  06AC  3A07               	xorlw	7	; case 4
   683  06AD  1903               	skipnz
   684  06AE  2E76               	goto	l719
   685  06AF  3A01               	xorlw	1	; case 5
   686  06B0  1903               	skipnz
   687  06B1  2E7D               	goto	l721
   688  06B2  3A03               	xorlw	3	; case 6
   689  06B3  1903               	skipnz
   690  06B4  2E84               	goto	l723
   691  06B5  3A01               	xorlw	1	; case 7
   692  06B6  1903               	skipnz
   693  06B7  2E8B               	goto	l725
   694  06B8  2E90               	goto	l727
   695  06B9                     l25:	
   696                           
   697                           ;./Oscilador.h: 47:     OSCCONbits.SCS = 1;
   698  06B9  140F               	bsf	15,0	;volatile
   699  06BA                     l34:	
   700  06BA  0008               	return
   701  06BB                     __end_of_iniciarOSC:	
   702                           
   703                           	psect	text3
   704  06BB                     __ptext3:	
   705 ;; *************** function _ReadWrite *****************
   706 ;; Defined at:
   707 ;;		line 41 in file "Datos.c"
   708 ;; Parameters:    Size  Location     Type
   709 ;;		None
   710 ;; Auto vars:     Size  Location     Type
   711 ;;		None
   712 ;; Return value:  Size  Location     Type
   713 ;;                  1    wreg      void 
   714 ;; Registers used:
   715 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   716 ;; Tracked objects:
   717 ;;		On entry : 0/0
   718 ;;		On exit  : 0/0
   719 ;;		Unchanged: 0/0
   720 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   721 ;;      Params:         0       0       0       0       0
   722 ;;      Locals:         0       0       0       0       0
   723 ;;      Temps:          2       0       0       0       0
   724 ;;      Totals:         2       0       0       0       0
   725 ;;Total ram usage:        2 bytes
   726 ;; Hardware stack levels used:    1
   727 ;; Hardware stack levels required when called:    2
   728 ;; This function calls:
   729 ;;		_UARTenvINT
   730 ;;		_UARTprint
   731 ;;		_UARTrecibir
   732 ;; This function is called by:
   733 ;;		_main
   734 ;; This function uses a non-reentrant model
   735 ;;
   736                           
   737                           
   738                           ;psect for function _ReadWrite
   739  06BB                     _ReadWrite:	
   740  06BB                     l879:	
   741                           ;incstack = 0
   742                           ; Regs used in _ReadWrite: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   743                           
   744                           
   745                           ;Datos.c: 43:     x = UARTrecibir();
   746  06BB  120A  118A  25FD  120A  118A  	fcall	_UARTrecibir
   747  06C0  00FA               	movwf	??_ReadWrite
   748  06C1  087A               	movf	??_ReadWrite,w
   749  06C2  00F5               	movwf	_x
   750  06C3                     l881:	
   751                           
   752                           ;Datos.c: 44:     _delay((unsigned long)((2)*(4000000/4000.0)));
   753  06C3  3003               	movlw	3
   754  06C4  00FB               	movwf	??_ReadWrite+1
   755  06C5  3097               	movlw	151
   756  06C6  00FA               	movwf	??_ReadWrite
   757  06C7                     u87:	
   758  06C7  0BFA               	decfsz	??_ReadWrite,f
   759  06C8  2EC7               	goto	u87
   760  06C9  0BFB               	decfsz	??_ReadWrite+1,f
   761  06CA  2EC7               	goto	u87
   762  06CB  2ECC               	nop2
   763                           
   764                           ;Datos.c: 46:     switch (x)
   765  06CC  2FDC               	goto	l947
   766  06CD                     l883:	
   767                           
   768                           ;Datos.c: 49:             celda = UARTrecibir();
   769  06CD  120A  118A  25FD  120A  118A  	fcall	_UARTrecibir
   770  06D2  00FA               	movwf	??_ReadWrite
   771  06D3  087A               	movf	??_ReadWrite,w
   772  06D4  00F4               	movwf	_celda
   773  06D5                     l885:	
   774                           
   775                           ;Datos.c: 50:             _delay((unsigned long)((2)*(4000000/4000.0)));
   776  06D5  3003               	movlw	3
   777  06D6  00FB               	movwf	??_ReadWrite+1
   778  06D7  3097               	movlw	151
   779  06D8  00FA               	movwf	??_ReadWrite
   780  06D9                     u97:	
   781  06D9  0BFA               	decfsz	??_ReadWrite,f
   782  06DA  2ED9               	goto	u97
   783  06DB  0BFB               	decfsz	??_ReadWrite+1,f
   784  06DC  2ED9               	goto	u97
   785  06DD  2EDE               	nop2
   786  06DE                     l887:	
   787                           
   788                           ;Datos.c: 51:             UARTenvINT(x);
   789  06DE  0875               	movf	_x,w
   790  06DF  00FA               	movwf	??_ReadWrite
   791  06E0  01FB               	clrf	??_ReadWrite+1
   792  06E1  087A               	movf	??_ReadWrite,w
   793  06E2  00F6               	movwf	UARTenvINT@x
   794  06E3  087B               	movf	??_ReadWrite+1,w
   795  06E4  00F7               	movwf	UARTenvINT@x+1
   796  06E5  120A  118A  25E6  120A  118A  	fcall	_UARTenvINT
   797  06EA                     l889:	
   798                           
   799                           ;Datos.c: 52:             _delay((unsigned long)((2)*(4000000/4000.0)));
   800  06EA  3003               	movlw	3
   801  06EB  00FB               	movwf	??_ReadWrite+1
   802  06EC  3097               	movlw	151
   803  06ED  00FA               	movwf	??_ReadWrite
   804  06EE                     u107:	
   805  06EE  0BFA               	decfsz	??_ReadWrite,f
   806  06EF  2EEE               	goto	u107
   807  06F0  0BFB               	decfsz	??_ReadWrite+1,f
   808  06F1  2EEE               	goto	u107
   809  06F2  2EF3               	nop2
   810  06F3                     l891:	
   811                           
   812                           ;Datos.c: 53:             UARTenvINT(celda);
   813  06F3  0874               	movf	_celda,w
   814  06F4  00FA               	movwf	??_ReadWrite
   815  06F5  01FB               	clrf	??_ReadWrite+1
   816  06F6  087A               	movf	??_ReadWrite,w
   817  06F7  00F6               	movwf	UARTenvINT@x
   818  06F8  087B               	movf	??_ReadWrite+1,w
   819  06F9  00F7               	movwf	UARTenvINT@x+1
   820  06FA  120A  118A  25E6  120A  118A  	fcall	_UARTenvINT
   821  06FF                     l893:	
   822                           
   823                           ;Datos.c: 54:             _delay((unsigned long)((2)*(4000000/4000.0)));
   824  06FF  3003               	movlw	3
   825  0700  00FB               	movwf	??_ReadWrite+1
   826  0701  3097               	movlw	151
   827  0702  00FA               	movwf	??_ReadWrite
   828  0703                     u117:	
   829  0703  0BFA               	decfsz	??_ReadWrite,f
   830  0704  2F03               	goto	u117
   831  0705  0BFB               	decfsz	??_ReadWrite+1,f
   832  0706  2F03               	goto	u117
   833  0707  2F08               	nop2
   834                           
   835                           ;Datos.c: 55:             break;
   836  0708  2FF5               	goto	l85
   837  0709                     l895:	
   838                           
   839                           ;Datos.c: 58:             luz = UARTrecibir();
   840  0709  120A  118A  25FD  120A  118A  	fcall	_UARTrecibir
   841  070E  00FA               	movwf	??_ReadWrite
   842  070F  087A               	movf	??_ReadWrite,w
   843  0710  00F3               	movwf	_luz
   844  0711                     l897:	
   845                           
   846                           ;Datos.c: 59:             _delay((unsigned long)((2)*(4000000/4000.0)));
   847  0711  3003               	movlw	3
   848  0712  00FB               	movwf	??_ReadWrite+1
   849  0713  3097               	movlw	151
   850  0714  00FA               	movwf	??_ReadWrite
   851  0715                     u127:	
   852  0715  0BFA               	decfsz	??_ReadWrite,f
   853  0716  2F15               	goto	u127
   854  0717  0BFB               	decfsz	??_ReadWrite+1,f
   855  0718  2F15               	goto	u127
   856  0719  2F1A               	nop2
   857  071A                     l899:	
   858                           
   859                           ;Datos.c: 60:             UARTenvINT(x);
   860  071A  0875               	movf	_x,w
   861  071B  00FA               	movwf	??_ReadWrite
   862  071C  01FB               	clrf	??_ReadWrite+1
   863  071D  087A               	movf	??_ReadWrite,w
   864  071E  00F6               	movwf	UARTenvINT@x
   865  071F  087B               	movf	??_ReadWrite+1,w
   866  0720  00F7               	movwf	UARTenvINT@x+1
   867  0721  120A  118A  25E6  120A  118A  	fcall	_UARTenvINT
   868  0726                     l901:	
   869                           
   870                           ;Datos.c: 61:             _delay((unsigned long)((2)*(4000000/4000.0)));
   871  0726  3003               	movlw	3
   872  0727  00FB               	movwf	??_ReadWrite+1
   873  0728  3097               	movlw	151
   874  0729  00FA               	movwf	??_ReadWrite
   875  072A                     u137:	
   876  072A  0BFA               	decfsz	??_ReadWrite,f
   877  072B  2F2A               	goto	u137
   878  072C  0BFB               	decfsz	??_ReadWrite+1,f
   879  072D  2F2A               	goto	u137
   880  072E  2F2F               	nop2
   881  072F                     l903:	
   882                           
   883                           ;Datos.c: 62:             UARTenvINT(luz);
   884  072F  0873               	movf	_luz,w
   885  0730  00FA               	movwf	??_ReadWrite
   886  0731  01FB               	clrf	??_ReadWrite+1
   887  0732  087A               	movf	??_ReadWrite,w
   888  0733  00F6               	movwf	UARTenvINT@x
   889  0734  087B               	movf	??_ReadWrite+1,w
   890  0735  00F7               	movwf	UARTenvINT@x+1
   891  0736  120A  118A  25E6  120A  118A  	fcall	_UARTenvINT
   892  073B  2EFF               	goto	l893
   893  073C                     l907:	
   894                           
   895                           ;Datos.c: 67:             dist = UARTrecibir();
   896  073C  120A  118A  25FD  120A  118A  	fcall	_UARTrecibir
   897  0741  00FA               	movwf	??_ReadWrite
   898  0742  087A               	movf	??_ReadWrite,w
   899  0743  00F2               	movwf	_dist
   900  0744                     l909:	
   901                           
   902                           ;Datos.c: 68:             _delay((unsigned long)((2)*(4000000/4000.0)));
   903  0744  3003               	movlw	3
   904  0745  00FB               	movwf	??_ReadWrite+1
   905  0746  3097               	movlw	151
   906  0747  00FA               	movwf	??_ReadWrite
   907  0748                     u147:	
   908  0748  0BFA               	decfsz	??_ReadWrite,f
   909  0749  2F48               	goto	u147
   910  074A  0BFB               	decfsz	??_ReadWrite+1,f
   911  074B  2F48               	goto	u147
   912  074C  2F4D               	nop2
   913  074D                     l911:	
   914                           
   915                           ;Datos.c: 69:             UARTenvINT(x);
   916  074D  0875               	movf	_x,w
   917  074E  00FA               	movwf	??_ReadWrite
   918  074F  01FB               	clrf	??_ReadWrite+1
   919  0750  087A               	movf	??_ReadWrite,w
   920  0751  00F6               	movwf	UARTenvINT@x
   921  0752  087B               	movf	??_ReadWrite+1,w
   922  0753  00F7               	movwf	UARTenvINT@x+1
   923  0754  120A  118A  25E6  120A  118A  	fcall	_UARTenvINT
   924  0759                     l913:	
   925                           
   926                           ;Datos.c: 70:             _delay((unsigned long)((2)*(4000000/4000.0)));
   927  0759  3003               	movlw	3
   928  075A  00FB               	movwf	??_ReadWrite+1
   929  075B  3097               	movlw	151
   930  075C  00FA               	movwf	??_ReadWrite
   931  075D                     u157:	
   932  075D  0BFA               	decfsz	??_ReadWrite,f
   933  075E  2F5D               	goto	u157
   934  075F  0BFB               	decfsz	??_ReadWrite+1,f
   935  0760  2F5D               	goto	u157
   936  0761  2F62               	nop2
   937  0762                     l915:	
   938                           
   939                           ;Datos.c: 71:             UARTenvINT(dist);
   940  0762  0872               	movf	_dist,w
   941  0763  00FA               	movwf	??_ReadWrite
   942  0764  01FB               	clrf	??_ReadWrite+1
   943  0765  087A               	movf	??_ReadWrite,w
   944  0766  00F6               	movwf	UARTenvINT@x
   945  0767  087B               	movf	??_ReadWrite+1,w
   946  0768  00F7               	movwf	UARTenvINT@x+1
   947  0769  120A  118A  25E6  120A  118A  	fcall	_UARTenvINT
   948  076E  2EFF               	goto	l893
   949  076F                     l919:	
   950                           
   951                           ;Datos.c: 76:             humo = UARTrecibir();
   952  076F  120A  118A  25FD  120A  118A  	fcall	_UARTrecibir
   953  0774  00FA               	movwf	??_ReadWrite
   954  0775  087A               	movf	??_ReadWrite,w
   955  0776  00F1               	movwf	_humo
   956  0777                     l921:	
   957                           
   958                           ;Datos.c: 77:             _delay((unsigned long)((2)*(4000000/4000.0)));
   959  0777  3003               	movlw	3
   960  0778  00FB               	movwf	??_ReadWrite+1
   961  0779  3097               	movlw	151
   962  077A  00FA               	movwf	??_ReadWrite
   963  077B                     u167:	
   964  077B  0BFA               	decfsz	??_ReadWrite,f
   965  077C  2F7B               	goto	u167
   966  077D  0BFB               	decfsz	??_ReadWrite+1,f
   967  077E  2F7B               	goto	u167
   968  077F  2F80               	nop2
   969  0780                     l923:	
   970                           
   971                           ;Datos.c: 78:             UARTenvINT(x);
   972  0780  0875               	movf	_x,w
   973  0781  00FA               	movwf	??_ReadWrite
   974  0782  01FB               	clrf	??_ReadWrite+1
   975  0783  087A               	movf	??_ReadWrite,w
   976  0784  00F6               	movwf	UARTenvINT@x
   977  0785  087B               	movf	??_ReadWrite+1,w
   978  0786  00F7               	movwf	UARTenvINT@x+1
   979  0787  120A  118A  25E6  120A  118A  	fcall	_UARTenvINT
   980  078C                     l925:	
   981                           
   982                           ;Datos.c: 79:             _delay((unsigned long)((2)*(4000000/4000.0)));
   983  078C  3003               	movlw	3
   984  078D  00FB               	movwf	??_ReadWrite+1
   985  078E  3097               	movlw	151
   986  078F  00FA               	movwf	??_ReadWrite
   987  0790                     u177:	
   988  0790  0BFA               	decfsz	??_ReadWrite,f
   989  0791  2F90               	goto	u177
   990  0792  0BFB               	decfsz	??_ReadWrite+1,f
   991  0793  2F90               	goto	u177
   992  0794  2F95               	nop2
   993  0795                     l927:	
   994                           
   995                           ;Datos.c: 80:             UARTenvINT(humo);
   996  0795  0871               	movf	_humo,w
   997  0796  00FA               	movwf	??_ReadWrite
   998  0797  01FB               	clrf	??_ReadWrite+1
   999  0798  087A               	movf	??_ReadWrite,w
  1000  0799  00F6               	movwf	UARTenvINT@x
  1001  079A  087B               	movf	??_ReadWrite+1,w
  1002  079B  00F7               	movwf	UARTenvINT@x+1
  1003  079C  120A  118A  25E6  120A  118A  	fcall	_UARTenvINT
  1004  07A1  2EFF               	goto	l893
  1005  07A2                     l931:	
  1006                           
  1007                           ;Datos.c: 85:             tempe = UARTrecibir();
  1008  07A2  120A  118A  25FD  120A  118A  	fcall	_UARTrecibir
  1009  07A7  00FA               	movwf	??_ReadWrite
  1010  07A8  087A               	movf	??_ReadWrite,w
  1011  07A9  00F0               	movwf	_tempe
  1012  07AA                     l933:	
  1013                           
  1014                           ;Datos.c: 86:             _delay((unsigned long)((2)*(4000000/4000.0)));
  1015  07AA  3003               	movlw	3
  1016  07AB  00FB               	movwf	??_ReadWrite+1
  1017  07AC  3097               	movlw	151
  1018  07AD  00FA               	movwf	??_ReadWrite
  1019  07AE                     u187:	
  1020  07AE  0BFA               	decfsz	??_ReadWrite,f
  1021  07AF  2FAE               	goto	u187
  1022  07B0  0BFB               	decfsz	??_ReadWrite+1,f
  1023  07B1  2FAE               	goto	u187
  1024  07B2  2FB3               	nop2
  1025  07B3                     l935:	
  1026                           
  1027                           ;Datos.c: 87:             UARTenvINT(x);
  1028  07B3  0875               	movf	_x,w
  1029  07B4  00FA               	movwf	??_ReadWrite
  1030  07B5  01FB               	clrf	??_ReadWrite+1
  1031  07B6  087A               	movf	??_ReadWrite,w
  1032  07B7  00F6               	movwf	UARTenvINT@x
  1033  07B8  087B               	movf	??_ReadWrite+1,w
  1034  07B9  00F7               	movwf	UARTenvINT@x+1
  1035  07BA  120A  118A  25E6  120A  118A  	fcall	_UARTenvINT
  1036  07BF                     l937:	
  1037                           
  1038                           ;Datos.c: 88:             _delay((unsigned long)((2)*(4000000/4000.0)));
  1039  07BF  3003               	movlw	3
  1040  07C0  00FB               	movwf	??_ReadWrite+1
  1041  07C1  3097               	movlw	151
  1042  07C2  00FA               	movwf	??_ReadWrite
  1043  07C3                     u197:	
  1044  07C3  0BFA               	decfsz	??_ReadWrite,f
  1045  07C4  2FC3               	goto	u197
  1046  07C5  0BFB               	decfsz	??_ReadWrite+1,f
  1047  07C6  2FC3               	goto	u197
  1048  07C7  2FC8               	nop2
  1049  07C8                     l939:	
  1050                           
  1051                           ;Datos.c: 89:             UARTenvINT(tempe);
  1052  07C8  0870               	movf	_tempe,w
  1053  07C9  00FA               	movwf	??_ReadWrite
  1054  07CA  01FB               	clrf	??_ReadWrite+1
  1055  07CB  087A               	movf	??_ReadWrite,w
  1056  07CC  00F6               	movwf	UARTenvINT@x
  1057  07CD  087B               	movf	??_ReadWrite+1,w
  1058  07CE  00F7               	movwf	UARTenvINT@x+1
  1059  07CF  120A  118A  25E6  120A  118A  	fcall	_UARTenvINT
  1060  07D4  2EFF               	goto	l893
  1061  07D5                     l943:	
  1062                           
  1063                           ;Datos.c: 94:             UARTprint("Nada");
  1064  07D5  3001               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
  1065  07D6  120A  118A  2638  120A  118A  	fcall	_UARTprint
  1066                           
  1067                           ;Datos.c: 95:             break;
  1068  07DB  2FF5               	goto	l85
  1069  07DC                     l947:	
  1070  07DC  0875               	movf	_x,w
  1071  07DD  00FA               	movwf	??_ReadWrite
  1072  07DE  01FB               	clrf	??_ReadWrite+1
  1073                           
  1074                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1075                           ; Switch size 1, requested type "simple"
  1076                           ; Number of cases is 1, Range of values is 0 to 0
  1077                           ; switch strategies available:
  1078                           ; Name         Instructions Cycles
  1079                           ; simple_byte            4     3 (average)
  1080                           ; direct_byte           11     8 (fixed)
  1081                           ; jumptable            260     6 (fixed)
  1082                           ;	Chosen strategy is simple_byte
  1083  07DF  087B               	movf	??_ReadWrite+1,w
  1084  07E0  3A00               	xorlw	0	; case 0
  1085  07E1  1903               	skipnz
  1086  07E2  2FE4               	goto	l1001
  1087  07E3  2FD5               	goto	l943
  1088  07E4                     l1001:	
  1089                           
  1090                           ; Switch size 1, requested type "simple"
  1091                           ; Number of cases is 5, Range of values is 0 to 4
  1092                           ; switch strategies available:
  1093                           ; Name         Instructions Cycles
  1094                           ; simple_byte           16     9 (average)
  1095                           ; direct_byte           23     8 (fixed)
  1096                           ; jumptable            260     6 (fixed)
  1097                           ;	Chosen strategy is simple_byte
  1098  07E4  087A               	movf	??_ReadWrite,w
  1099  07E5  3A00               	xorlw	0	; case 0
  1100  07E6  1903               	skipnz
  1101  07E7  2ECD               	goto	l883
  1102  07E8  3A01               	xorlw	1	; case 1
  1103  07E9  1903               	skipnz
  1104  07EA  2F09               	goto	l895
  1105  07EB  3A03               	xorlw	3	; case 2
  1106  07EC  1903               	skipnz
  1107  07ED  2F3C               	goto	l907
  1108  07EE  3A01               	xorlw	1	; case 3
  1109  07EF  1903               	skipnz
  1110  07F0  2F6F               	goto	l919
  1111  07F1  3A07               	xorlw	7	; case 4
  1112  07F2  1903               	skipnz
  1113  07F3  2FA2               	goto	l931
  1114  07F4  2FD5               	goto	l943
  1115  07F5                     l85:	
  1116  07F5  0008               	return
  1117  07F6                     __end_of_ReadWrite:	
  1118                           
  1119                           	psect	text4
  1120  05FD                     __ptext4:	
  1121 ;; *************** function _UARTrecibir *****************
  1122 ;; Defined at:
  1123 ;;		line 27 in file "./UART.h"
  1124 ;; Parameters:    Size  Location     Type
  1125 ;;		None
  1126 ;; Auto vars:     Size  Location     Type
  1127 ;;		None
  1128 ;; Return value:  Size  Location     Type
  1129 ;;                  1    wreg      unsigned char 
  1130 ;; Registers used:
  1131 ;;		wreg
  1132 ;; Tracked objects:
  1133 ;;		On entry : 0/0
  1134 ;;		On exit  : 0/0
  1135 ;;		Unchanged: 0/0
  1136 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1137 ;;      Params:         0       0       0       0       0
  1138 ;;      Locals:         0       0       0       0       0
  1139 ;;      Temps:          0       0       0       0       0
  1140 ;;      Totals:         0       0       0       0       0
  1141 ;;Total ram usage:        0 bytes
  1142 ;; Hardware stack levels used:    1
  1143 ;; This function calls:
  1144 ;;		Nothing
  1145 ;; This function is called by:
  1146 ;;		_ReadWrite
  1147 ;; This function uses a non-reentrant model
  1148 ;;
  1149                           
  1150                           
  1151                           ;psect for function _UARTrecibir
  1152  05FD                     _UARTrecibir:	
  1153  05FD                     l689:	
  1154                           ;incstack = 0
  1155                           ; Regs used in _UARTrecibir: [wreg]
  1156                           
  1157  05FD                     l40:	
  1158                           ;./UART.h: 30:     {;./UART.h: 32:     }
  1159                           
  1160                           
  1161                           ;./UART.h: 29:     while(PIR1bits.RCIF == 0)
  1162  05FD  1283               	bcf	3,5	;RP0=0, select bank0
  1163  05FE  1303               	bcf	3,6	;RP1=0, select bank0
  1164  05FF  1E8C               	btfss	12,5	;volatile
  1165  0600  2E02               	goto	u21
  1166  0601  2E03               	goto	u20
  1167  0602                     u21:	
  1168  0602  2DFD               	goto	l40
  1169  0603                     u20:	
  1170  0603                     l42:	
  1171                           
  1172                           ;./UART.h: 34:     if(RCSTAbits.OERR)
  1173  0603  1C98               	btfss	24,1	;volatile
  1174  0604  2E06               	goto	u31
  1175  0605  2E07               	goto	u30
  1176  0606                     u31:	
  1177  0606  2E09               	goto	l693
  1178  0607                     u30:	
  1179  0607                     l691:	
  1180                           
  1181                           ;./UART.h: 35:     {;./UART.h: 36:         RCSTAbits.CREN = 0;
  1182  0607  1218               	bcf	24,4	;volatile
  1183                           
  1184                           ;./UART.h: 37:         RCSTAbits.CREN = 1;
  1185  0608  1618               	bsf	24,4	;volatile
  1186  0609                     l693:	
  1187                           
  1188                           ;./UART.h: 40:     return RCREG;
  1189  0609  081A               	movf	26,w	;volatile
  1190  060A                     l44:	
  1191  060A  0008               	return
  1192  060B                     __end_of_UARTrecibir:	
  1193                           
  1194                           	psect	text5
  1195  0638                     __ptext5:	
  1196 ;; *************** function _UARTprint *****************
  1197 ;; Defined at:
  1198 ;;		line 53 in file "./UART.h"
  1199 ;; Parameters:    Size  Location     Type
  1200 ;;  data            1    wreg     PTR unsigned char 
  1201 ;;		 -> STR_1(5), 
  1202 ;; Auto vars:     Size  Location     Type
  1203 ;;  data            1    2[COMMON] PTR unsigned char 
  1204 ;;		 -> STR_1(5), 
  1205 ;;  i               1    3[COMMON] unsigned char 
  1206 ;; Return value:  Size  Location     Type
  1207 ;;                  1    wreg      void 
  1208 ;; Registers used:
  1209 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1210 ;; Tracked objects:
  1211 ;;		On entry : 0/0
  1212 ;;		On exit  : 0/0
  1213 ;;		Unchanged: 0/0
  1214 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1215 ;;      Params:         0       0       0       0       0
  1216 ;;      Locals:         2       0       0       0       0
  1217 ;;      Temps:          1       0       0       0       0
  1218 ;;      Totals:         3       0       0       0       0
  1219 ;;Total ram usage:        3 bytes
  1220 ;; Hardware stack levels used:    1
  1221 ;; Hardware stack levels required when called:    1
  1222 ;; This function calls:
  1223 ;;		_UARTenviar
  1224 ;; This function is called by:
  1225 ;;		_ReadWrite
  1226 ;; This function uses a non-reentrant model
  1227 ;;
  1228                           
  1229                           
  1230                           ;psect for function _UARTprint
  1231  0638                     _UARTprint:	
  1232                           
  1233                           ;incstack = 0
  1234                           ; Regs used in _UARTprint: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1235                           ;UARTprint@data stored from wreg
  1236  0638  00F8               	movwf	UARTprint@data
  1237  0639                     l867:	
  1238                           
  1239                           ;./UART.h: 53: void UARTprint(char *data);./UART.h: 54: {;./UART.h: 55:     uint8_t i = 
      +                          0;
  1240  0639  01F9               	clrf	UARTprint@i
  1241                           
  1242                           ;./UART.h: 57:     while(data[i] != '\0')
  1243  063A  2E4C               	goto	l873
  1244  063B                     l869:	
  1245                           
  1246                           ;./UART.h: 58:     {;./UART.h: 59:         UARTenviar(data[i++]);
  1247  063B  0879               	movf	UARTprint@i,w
  1248  063C  0778               	addwf	UARTprint@data,w
  1249  063D  0084               	movwf	4
  1250  063E  120A  118A  2003  120A  118A  	fcall	stringdir
  1251  0643  120A  118A  25F1  120A  118A  	fcall	_UARTenviar
  1252  0648                     l871:	
  1253  0648  3001               	movlw	1
  1254  0649  00F7               	movwf	??_UARTprint
  1255  064A  0877               	movf	??_UARTprint,w
  1256  064B  07F9               	addwf	UARTprint@i,f
  1257  064C                     l873:	
  1258                           
  1259                           ;./UART.h: 57:     while(data[i] != '\0')
  1260  064C  0879               	movf	UARTprint@i,w
  1261  064D  0778               	addwf	UARTprint@data,w
  1262  064E  0084               	movwf	4
  1263  064F  120A  118A  2003  120A  118A  	fcall	stringdir
  1264  0654  3A00               	xorlw	0
  1265  0655  1D03               	skipz
  1266  0656  2E58               	goto	u61
  1267  0657  2E59               	goto	u60
  1268  0658                     u61:	
  1269  0658  2E3B               	goto	l869
  1270  0659                     u60:	
  1271  0659                     l56:	
  1272  0659  0008               	return
  1273  065A                     __end_of_UARTprint:	
  1274                           
  1275                           	psect	text6
  1276  05F1                     __ptext6:	
  1277 ;; *************** function _UARTenviar *****************
  1278 ;; Defined at:
  1279 ;;		line 43 in file "./UART.h"
  1280 ;; Parameters:    Size  Location     Type
  1281 ;;  data            1    wreg     unsigned char 
  1282 ;; Auto vars:     Size  Location     Type
  1283 ;;  data            1    0[COMMON] unsigned char 
  1284 ;; Return value:  Size  Location     Type
  1285 ;;                  1    wreg      void 
  1286 ;; Registers used:
  1287 ;;		wreg
  1288 ;; Tracked objects:
  1289 ;;		On entry : 0/0
  1290 ;;		On exit  : 0/0
  1291 ;;		Unchanged: 0/0
  1292 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1293 ;;      Params:         0       0       0       0       0
  1294 ;;      Locals:         1       0       0       0       0
  1295 ;;      Temps:          0       0       0       0       0
  1296 ;;      Totals:         1       0       0       0       0
  1297 ;;Total ram usage:        1 bytes
  1298 ;; Hardware stack levels used:    1
  1299 ;; This function calls:
  1300 ;;		Nothing
  1301 ;; This function is called by:
  1302 ;;		_UARTprint
  1303 ;; This function uses a non-reentrant model
  1304 ;;
  1305                           
  1306                           
  1307                           ;psect for function _UARTenviar
  1308  05F1                     _UARTenviar:	
  1309                           
  1310                           ;incstack = 0
  1311                           ; Regs used in _UARTenviar: [wreg]
  1312                           ;UARTenviar@data stored from wreg
  1313  05F1  00F6               	movwf	UARTenviar@data
  1314  05F2                     l685:	
  1315  05F2                     l47:	
  1316                           ;./UART.h: 46:     {;./UART.h: 48:     }
  1317                           
  1318                           
  1319                           ;./UART.h: 45:     while (TXSTAbits.TRMT == 0)
  1320  05F2  1683               	bsf	3,5	;RP0=1, select bank1
  1321  05F3  1303               	bcf	3,6	;RP1=0, select bank1
  1322  05F4  1C98               	btfss	24,1	;volatile
  1323  05F5  2DF7               	goto	u11
  1324  05F6  2DF8               	goto	u10
  1325  05F7                     u11:	
  1326  05F7  2DF2               	goto	l47
  1327  05F8                     u10:	
  1328  05F8                     l687:	
  1329                           
  1330                           ;./UART.h: 50:     TXREG = data;
  1331  05F8  0876               	movf	UARTenviar@data,w
  1332  05F9  1283               	bcf	3,5	;RP0=0, select bank0
  1333  05FA  1303               	bcf	3,6	;RP1=0, select bank0
  1334  05FB  0099               	movwf	25	;volatile
  1335  05FC                     l50:	
  1336  05FC  0008               	return
  1337  05FD                     __end_of_UARTenviar:	
  1338                           
  1339                           	psect	text7
  1340  05E6                     __ptext7:	
  1341 ;; *************** function _UARTenvINT *****************
  1342 ;; Defined at:
  1343 ;;		line 63 in file "./UART.h"
  1344 ;; Parameters:    Size  Location     Type
  1345 ;;  x               2    0[COMMON] int 
  1346 ;; Auto vars:     Size  Location     Type
  1347 ;;		None
  1348 ;; Return value:  Size  Location     Type
  1349 ;;                  1    wreg      void 
  1350 ;; Registers used:
  1351 ;;		wreg
  1352 ;; Tracked objects:
  1353 ;;		On entry : 0/0
  1354 ;;		On exit  : 0/0
  1355 ;;		Unchanged: 0/0
  1356 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1357 ;;      Params:         2       0       0       0       0
  1358 ;;      Locals:         0       0       0       0       0
  1359 ;;      Temps:          0       0       0       0       0
  1360 ;;      Totals:         2       0       0       0       0
  1361 ;;Total ram usage:        2 bytes
  1362 ;; Hardware stack levels used:    1
  1363 ;; This function calls:
  1364 ;;		Nothing
  1365 ;; This function is called by:
  1366 ;;		_ReadWrite
  1367 ;; This function uses a non-reentrant model
  1368 ;;
  1369                           
  1370                           
  1371                           ;psect for function _UARTenvINT
  1372  05E6                     _UARTenvINT:	
  1373  05E6                     l875:	
  1374                           ;incstack = 0
  1375                           ; Regs used in _UARTenvINT: [wreg]
  1376                           
  1377  05E6                     l59:	
  1378                           ;./UART.h: 66:     {;./UART.h: 68:     }
  1379                           
  1380                           
  1381                           ;./UART.h: 65:     while (TXSTAbits.TRMT == 0)
  1382  05E6  1683               	bsf	3,5	;RP0=1, select bank1
  1383  05E7  1303               	bcf	3,6	;RP1=0, select bank1
  1384  05E8  1C98               	btfss	24,1	;volatile
  1385  05E9  2DEB               	goto	u71
  1386  05EA  2DEC               	goto	u70
  1387  05EB                     u71:	
  1388  05EB  2DE6               	goto	l59
  1389  05EC                     u70:	
  1390  05EC                     l877:	
  1391                           
  1392                           ;./UART.h: 70:     TXREG = x;
  1393  05EC  0876               	movf	UARTenvINT@x,w
  1394  05ED  1283               	bcf	3,5	;RP0=0, select bank0
  1395  05EE  1303               	bcf	3,6	;RP1=0, select bank0
  1396  05EF  0099               	movwf	25	;volatile
  1397  05F0                     l62:	
  1398  05F0  0008               	return
  1399  05F1                     __end_of_UARTenvINT:	
  1400  007E                     btemp	set	126	;btemp
  1401  007E                     wtemp0	set	126


Data Sizes:
    Strings     5
    Constant    0
    Data        0
    BSS         6
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6      12
    BANK0            80      0       0
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    UARTprint@data	PTR unsigned char  size(1) Largest target is 5
		 -> STR_1(CODE[5]), 


Critical Paths under _main in COMMON

    _main->_ReadWrite
    _ReadWrite->_UARTprint
    _UARTprint->_UARTenviar

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0     935
                          _ReadWrite
                         _iniciarOSC
                        _iniciarUART
 ---------------------------------------------------------------------------------
 (1) _iniciarUART                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _iniciarOSC                                           3     3      0      15
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _ReadWrite                                            2     2      0     920
                                              4 COMMON     2     2      0
                         _UARTenvINT
                          _UARTprint
                        _UARTrecibir
 ---------------------------------------------------------------------------------
 (2) _UARTrecibir                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _UARTprint                                            3     3      0     138
                                              1 COMMON     3     3      0
                         _UARTenviar
 ---------------------------------------------------------------------------------
 (3) _UARTenviar                                           1     1      0      15
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _UARTenvINT                                           2     0      2     782
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ReadWrite
     _UARTenvINT
     _UARTprint
       _UARTenviar
     _UARTrecibir
   _iniciarOSC
   _iniciarUART

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      6       C       1       85.7%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0       C       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0       C      12        0.0%


Microchip Technology PIC Macro Assembler V2.10 build 88905656 
Symbol Table                                                                                   Fri Apr 10 16:01:03 2020

                       _x 0075                         pc 0002               __CFG_CP$OFF 0000  
                      l40 05FD                        l25 06B9                        l50 05FC  
                      l42 0603                        l34 06BA                        l44 060A  
                      l37 0637                        l62 05F0                        l47 05F2  
                      l56 0659                        l59 05E6                        l85 07F5  
                      u10 05F8                        u11 05F7                        u20 0603  
                      u21 0602                        u30 0607                        u31 0606  
                      u60 0659                        u61 0658                        u70 05EC  
                      u71 05EB                        u87 06C7                        u97 06D9  
                      fsr 0004                       l711 065C                       l721 067D  
                     l713 0661                       l723 0684                       l715 0668  
                     l731 0697                       l901 0726                       l725 068B  
                     l717 066F                       l709 065B                       l741 0630  
                     l911 074D                       l903 072F                       l727 0690  
                     l719 0676                       l743 0631                       l921 0777  
                     l913 0759                       l745 0634                       l737 061F  
                     l691 0607                       l931 07A2                       l923 0780  
                     l915 0762                       l907 073C                       l739 062C  
                     l685 05F2                       l693 0609                       l933 07AA  
                     l925 078C                       l909 0744                       l687 05F8  
                     l871 0648                       l943 07D5                       l935 07B3  
                     l927 0795                       l919 076F                       l873 064C  
                     l689 05FD                       l937 07BF                       l881 06C3  
                     l953 060B                       l875 05E6                       l867 0639  
                     l939 07C8                       l891 06F3                       l883 06CD  
                     l947 07DC                       l955 0611                       l877 05EC  
                     l869 063B                       l893 06FF                       l885 06D5  
                     l957 0616                       l895 0709                       l887 06DE  
                     l879 06BB                       l897 0711                       l889 06EA  
                     l899 071A                       l999 069F                       u107 06EE  
                     u117 0703                       u127 0715                       u137 072A  
                     u147 0748                       u157 075D                       u167 077B  
                     u177 0790              __CFG_CPD$OFF 0000                       u187 07AE  
                     u197 07C3                       _luz 0073                       fsr0 0004  
            __CFG_LVP$OFF 0000                      l1001 07E4                      STR_1 0009  
            __CFG_WRT$OFF 0000                      _dist 0072                      _main 060B  
                    _humo 0071                      btemp 007E              ?_iniciarUART 0076  
                    start 0000             __CFG_IESO$OFF 0000                     ?_main 0076  
           __CFG_WDTE$OFF 0000                     _RCREG 001A                     _SPBRG 0099  
                   _TXREG 0019            __CFG_FCMEN$OFF 0000                     _celda 0074  
             ?_UARTenvINT 0076                     _tempe 0070               ?_UARTenviar 0076  
      __size_of_UARTprint 0022            __CFG_BOREN$OFF 0000                     pclath 000A  
                   status 0003                     wtemp0 007E            __CFG_MCLRE$OFF 0000  
         __initialization 07F6              __end_of_main 061F                    ??_main 007C  
                  _SPBRGH 009A        __size_of_ReadWrite 013B            __CFG_PWRTE$OFF 0000  
     __size_of_UARTenvINT 000B            iniciarOSC@frec 0078         __end_of_UARTprint 065A  
     __size_of_UARTenviar 000C              ?_UARTrecibir 0076   __end_of__initialization 07FC  
    __size_of_iniciarUART 0019            __pcstackCOMMON 0076         __end_of_ReadWrite 07F6  
              __pmaintext 060B              ??_UARTenvINT 0078              ??_UARTenviar 0076  
              __stringtab 0003                _iniciarOSC 065A        __end_of_UARTenvINT 05F1  
      __end_of_UARTenviar 05FD                   __ptext1 061F                   __ptext2 065A  
                 __ptext3 06BB                   __ptext4 05FD                   __ptext5 0638  
                 __ptext6 05F1                   __ptext7 05E6      __size_of_UARTrecibir 000E  
    end_of_initialization 07FC               UARTenvINT@x 0076                 _RCSTAbits 0018  
               _UARTprint 0638                 _TXSTAbits 0098               ?_iniciarOSC 0076  
             _BAUDCTLbits 0187                ?_UARTprint 0076       start_initialization 07F6  
               _ReadWrite 06BB             ??_iniciarUART 0076  __CFG_FOSC$INTRC_NOCLKOUT 0000  
             __pbssCOMMON 0070                 ___latbits 0002       __size_of_iniciarOSC 0061  
              ?_ReadWrite 0076       __end_of_iniciarUART 0638                 __pstrings 0003  
             ??_UARTprint 0077                  _PIR1bits 000C                UARTprint@i 0079  
             __stringbase 0008             ??_UARTrecibir 0076               ??_ReadWrite 007A  
          UARTenviar@data 0076               _iniciarUART 061F              ??_iniciarOSC 0076  
      __end_of__stringtab 0009        __end_of_iniciarOSC 06BB         __CFG_BOR4V$BOR40V 0000  
     __end_of_UARTrecibir 060B             __size_of_main 0014                 stringcode 0003  
              _OSCCONbits 008F               _UARTrecibir 05FD                  stringdir 0003  
                stringtab 0003                _UARTenvINT 05E6                _UARTenviar 05F1  
           UARTprint@data 0078  
